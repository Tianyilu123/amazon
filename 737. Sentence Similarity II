class Solution {
    public boolean areSentencesSimilarTwo(String[] words1, String[] words2, 
                                                        List<List<String>> pairs) {
        if(words1.length != words2.length) return false;
        Map<String, Set<String>> map = new HashMap<>();
        buildGraph(pairs, map);
        int n = words1.length;
        
        for(int i=0; i<n; i++) {
            if(words1[i].equals(words2[i])) continue;
            if(!dfs(words1[i], words2[i], map, new HashSet<>()))
                return false;
        }
        
        return true;
    }
    
    private void buildGraph(List<List<String>> pairs, Map<String, Set<String>> map) {
        for(List<String> pair : pairs) {
            map.putIfAbsent(pair.get(0), new HashSet<>());
            map.putIfAbsent(pair.get(1), new HashSet<>());
            map.get(pair.get(0)).add(pair.get(1));
            map.get(pair.get(1)).add(pair.get(0));
            
        }
    }
    
    private boolean dfs(String s1, String s2, Map<String, Set<String>> map, Set<String> visited) {
        if(map.get(s1) == null || map.get(s1).size() == 0) return false;
        if(map.get(s1).contains(s2)) return true;
        for(String nei : map.get(s1)) {
            if(!visited.add(nei))
                continue;
            if(dfs(nei, s2, map, visited))
                return true;
        }
        return false;
    }
}
