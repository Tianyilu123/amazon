class Solution {
    Map<TreeNode, List<TreeNode>> map = new HashMap<>();
    public List<Integer> distanceK(TreeNode root, TreeNode target, int K) {
        List<Integer> res = new ArrayList<>();
        if(K<0) return res;
        build(root, null);
        
        HashSet<TreeNode> visited = new HashSet<>();
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(target);
        visited.add(target);
        
        while(!queue.isEmpty()) {
            int size = queue.size();
            if(K== 0) {
                for(int i=0; i<size; i++) {
                    TreeNode cur = queue.poll();
                    res.add(cur.val);
                }
                return res;
            }
            // on the road
            for(int i=0; i<size; i++) {
                TreeNode cur = queue.poll();
                for(TreeNode nei : map.get(cur)) {
                    if(!visited.add(nei)) continue;
                    queue.offer(nei);
                }
            }
            K--;
        }
        return res;
    }
    
    private void build(TreeNode node, TreeNode parent) {
        if(node == null) return;
        if(!map.containsKey(node)) {
            map.put(node, new ArrayList<>());
            if(parent != null) {
                map.get(node).add(parent);
                map.get(parent).add(node);
            }
            build(node.left, node);
            build(node.right, node);
        }
    }
}
